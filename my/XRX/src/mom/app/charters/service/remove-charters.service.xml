<xrx:service xmlns:xrx="http://www.monasterium.net/NS/xrx">
  <xrx:id>tag:www.monasterium.net,2011:/mom/service/remove-charters</xrx:id>
  <xrx:title>
    <xrx:i18n>
      <xrx:key></xrx:key>
      <xrx:default></xrx:default>
    </xrx:i18n>
  </xrx:title>
  <xrx:subtitle></xrx:subtitle>
  <xrx:description></xrx:description>
  <xrx:author>jochen.graf@uni-koeln.de</xrx:author>
  <xrx:licence>
This is a component file of the VdU Software for a Virtual Research Environment for the handling of Medieval charters.

As the source code is available here, it is somewhere between an alpha- and a beta-release, may be changed without any consideration of backward compatibility of other parts of the system, therefore, without any notice.

This file is part of the VdU Virtual Research Environment Toolkit (VdU/VRET).

The VdU/VRET is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

VdU/VRET is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with VdU/VRET.  If not, see http://www.gnu.org/licenses.
  </xrx:licence>
  <xrx:variables>
  <!-- $cacheid and $processid provided to this service via post-request. Basically made them up. -->
    <xrx:variable>
      <xrx:name>$cacheid</xrx:name>
      <xrx:expression>xs:string($data//*:cacheid/text())</xrx:expression>
    </xrx:variable>
    <xrx:variable>
      <xrx:name>$processid</xrx:name>
      <xrx:expression>xs:string($data//*:processid/text())</xrx:expression>
    </xrx:variable>
    <xrx:variable>
      <xrx:name>$context</xrx:name>
      <xrx:expression>xs:string($data//xrx:context/text())</xrx:expression>
    </xrx:variable>
    <xrx:variable>
      <xrx:name>$archid</xrx:name>
      <xrx:expression>if($context = 'fond') then xs:string($data//xrx:archid/text()) else ''</xrx:expression>
    </xrx:variable>
    <xrx:variable>
      <xrx:name>$fondid</xrx:name>
      <xrx:expression>if($context = 'fond') then xs:string($data//xrx:fondid/text()) else ''</xrx:expression>
    </xrx:variable>
    <xrx:variable>
      <xrx:name>$collectionid</xrx:name>
      <xrx:expression>if($context = 'collection') then xs:string($data//xrx:collectionid/text()) else ''</xrx:expression>
    </xrx:variable>
    <xrx:variable>
      <xrx:name>$uri-tokens</xrx:name>
      <xrx:expression>if($context = 'fond') then ($archid, $fondid) else $collectionid</xrx:expression>
    </xrx:variable>
    <xrx:variable>
      <xrx:name>$charters-import-feed</xrx:name>
      <xrx:expression>metadata:feed('charter', $uri-tokens, 'import')</xrx:expression>
    </xrx:variable>
    <xrx:variable>
      <xrx:name>$charters-import-collection-path</xrx:name>
      <xrx:expression>concat(conf:param('atom-db-base-uri'), $charters-import-feed)</xrx:expression>
    </xrx:variable>
    <!-- the current collection obtained from the collection path. -->
    <xrx:variable>
      <xrx:name>$charters-import-collection</xrx:name>
      <xrx:expression>collection($charters-import-collection-path)</xrx:expression>
    </xrx:variable>
    <!-- the amount of charters inside the collection that is going to be deleted -->
    <xrx:variable>
      <xrx:name>$charters-import-amount-of-charters</xrx:name>
      <xrx:expression>count($charters-import-collection)</xrx:expression>
    </xrx:variable>
  </xrx:variables>
  <xrx:init>
   <xrx:processor>
     <xrx:translateflag>false</xrx:translateflag>
   </xrx:processor>
  </xrx:init>
  <xrx:body>
    {

    let $progress1 :=
    <xrx:progress>
      <xrx:cacheid>{ $cacheid }</xrx:cacheid>
      <xrx:processid>{ $processid }</xrx:processid>
      <xrx:actual>0</xrx:actual>
      <xrx:total>0</xrx:total>
      <xrx:message>Preparing charters...</xrx:message>
    </xrx:progress>
    let $cache := cache:put($cacheid, $processid, $progress1)
    let $wait := util:wait(2000)

		    (: removing the charters one by one, to be able to have a progress bar.
		     ~ When only calling xmldb:remove once for the entire collection, we are blind to the actual operation until it is finished.
		     :)
    let $do-remove :=
		    (: loop through all the charters in the collection. Provide the xrx:progress element,
		     ~ put it inside the cache with cache:put, so the javascript code can request periodical updates.
		     :)
	   if((($archid != '' and $fondid != '') or $collectionid != '')) then
		    for $charter-to-remove at $pos in $charters-import-collection
		      let $charter-document-uri := document-uri($charter-to-remove)
		      (: let $debug1 := util:log("error", concat('DOCURI: ',$charter-document-uri)) :)
		      let $remove-imported-charter := xmldb:remove($charters-import-collection-path, tokenize($charter-document-uri, '/')[last()])
		      let $progress2 :=
			      <xrx:progress>
			        <xrx:cacheid>{ $cacheid }</xrx:cacheid>
			        <xrx:processid>{ $processid }</xrx:processid>
			        <xrx:actual>{ $pos }</xrx:actual>
			        <xrx:total>{ $charters-import-amount-of-charters }</xrx:total>
			        <xrx:message></xrx:message>
			      </xrx:progress>
			    let $cache := cache:put($cacheid, $processid, $progress2)
			    return true()
		  else ()

		(: clear cache after 2 seconds, so the Javascript gets its chance to notice the 100 % status while calling only every other second. :)
		let $wait_a_moment := util:wait(2000)
    let $clear-cache := cache:clear($cacheid)

    (: The collection is not removed, even though it is empty, because removing the collection is handled in a different workflow. Left in here as a little stub... :)
    (: let $remove-empty-imported-charters-collection := if((($archid != '' and $fondid != '') or $collectionid != '')) then xmldb:remove($charters-import-collection-path) else() :)

	  return
	  ()

    }
  </xrx:body>
</xrx:service>